replicaCount: 5

env: "feature"

image:
  repository: ""
  pullPolicy: IfNotPresent
  tag: 1.0.1-SNAPSHOT-PEFR-522025-1.cc40461 
  # 1.0.1-SNAPSHOT-RTI-PERFORM-1.0.3.976e50f

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  create: true
  annotations: {}
  name: ""

podAnnotations:
  prometheus.io/scrape: "true"
  prometheus.io/path: "/actuator/prometheus"
  prometheus.io/port: "8081"

podSecurityContext: {}

securityContext: {}

service:
  type: ClusterIP
  port: 8082
  httpsPort: 443

ingress:
  enabled: true
  className: "nginx"
  tls:
  - secretName: app.feature.nbspreview.com
    hosts:
    - app.feature.nbspreview.com

# Kubernetes resource limits
resources:
  requests:
    cpu: "700m"
    memory: "2Gi"
  limits:
    cpu: "1000m"
    memory: "2Gi"

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80

nodeSelector: {}

tolerations: []

affinity:
  podAntiAffinity:
    requiredDuringSchedulingIgnoredDuringExecution:
      - labelSelector:
          matchExpressions:
            - key: app
              operator: In
              values:
                - data-processing-service
        topologyKey: "kubernetes.io/hostname"

ingressHost: "app.feature.nbspreview.com"

jdbc:
  dbserver: ""
  username: ""
  password: ""

nbs:
  authuser: ""

kafka:
  cluster: ""

log:
  path: "/usr/share/dataprocessing/data"

dataingestion:
  uri: ""

keycloak:
  srte:
    clientId: ""
    clientSecret: ""

kafkaThread: "1"
maxPollRecord: "100"
jdbcFlag: "true"
threadPoolSize: "5"
threadQueueSize: "100"