replicaCount: 1

env: "int1"

image:
  repository: ""
  pullPolicy: IfNotPresent
  tag: 1.0.1-SNAPSHOT.1d510a3

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  create: true
  annotations: {}
  name: ""

podAnnotations:
  prometheus.io/scrape: "true"
  prometheus.io/path: "/actuator/prometheus"
  prometheus.io/port: "8081"

podSecurityContext: {}

securityContext: {}

service:
  type: ClusterIP
  port: 8081
  httpsPort: 443

ingress:
  enabled: true
  className: "nginx"  
  tls:
    - secretName: dataingestion.int1.nbspreview.com
      hosts:
        - dataingestion.int1.nbspreview.com

resources: {}

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80

nodeSelector: {}

tolerations: []

affinity: {}

ingressHost: "dataingestion.int1.nbspreview.com"

jdbc:
  dbserver: "cdc-nbs-legacy-rds-mssql-test-10-11-23.clubdoy7zd5o.us-east-1.rds.amazonaws.com"
  dbname: "NBS_DataIngest"
  username: "admin"
  password: ""

nbs:
  dbserver: "cdc-nbs-legacy-rds-mssql-test-10-11-23.clubdoy7zd5o.us-east-1.rds.amazonaws.com"
  dbname: "nbs_msgoute"
  username: "admin"
  password: ""


kafka:
  cluster: "b-1.mskclusterdevelopment.q7rolv.c2.kafka.us-east-1.amazonaws.com:9092"

log:
  path: "/usr/share/dataingestion/data"

pvc:
  diPvClaim:
    storageClass: efs-dataingestion
    storageRequest: 20Gi

efsFileSystemId: ""

rsa:
  privateKey:
  publicKey:
