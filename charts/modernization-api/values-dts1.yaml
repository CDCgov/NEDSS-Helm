replicaCount: 1

env: "dts1"

image:
  repository: ""
  pullPolicy: IfNotPresent
  tag: 1.0.1-SNAPSHOT.a05bcff # 1.0.1-SNAPSHOT.1b7c40b  

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  create: true
  annotations: {}
  name: ""

podAnnotations: {}

podSecurityContext: {}

securityContext: {}

service:
  type: ClusterIP
  port: 8080
  httpsPort: 443
  gatewayPort: 8000
  pageBuilderPort: 8095

reportingService:
  enabled: "true"
  personReportingServicePort: 8091
  organizationReportingServicePort: 8092
  investigationReportingServicePort: 8093
  observationReportingServicePort: 8094
  postProcessingReportingServicePort: 8095

pageBuilder:
  enabled: "false"
  page:
    library:
      enabled: "true"
    management:
      create:
        enabled: "true"
      edit:
        enabled: "true"

# nginx-ingress
ingress:
  enabled: true
  className: "nginx"
  tls:
  - secretName: app.dts1.nbspreview.com
    hosts:
    - app.dts1.nbspreview.com

nbsExternalName: app-classic.dts1.nbspreview.com

# determine whether or not to use istio-gateway for ingress (only 1 ingress should be used to prevent conflicts)
istioGatewayIngress:
  enabled: false
  host: app.dts1.nbspreview.com
  gatewayNamespace: "istio-ingress"
  certificateName: ""
  certificateIssuerName: "letsencrypt-production"

mTLS:
  enabled: false

resources: {}

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80

nodeSelector: {}

tolerations: []

affinity: {}

ingressHost: "app.dts1.nbspreview.com"

elasticSearchHost: "http://elasticsearch.default.svc.cluster.local:9200"

# OIDC settings
oidc:
  enabled: "false"

jdbc:
  connectionString: ""
  user: ""
  password: ""

ui:
  smarty:
    key: ""
  analytics:
    key: ""
